Activation.h

#ifndef ACTIVATION_H
#define ACTIVATION_H

class Activation {
public:
    virtual ~Activation() = default;
    virtual void activate() = 0;
    virtual void deactivate() = 0;
    virtual bool isActivated() const = 0;
};

#endif

Admin.h

#ifndef ADMIN_H
#define ADMIN_H

#include "Person.h"
#include "Place.h"
#include "Subscription.h"
#include <vector>

class Admin : public Person {
public:
    Admin(const std::string& login = "admin", const std::string& password = "admin")
        : Person(login, password) {}

    void showMenu(std::vector<Place>& places, std::vector<Subscription>& subscriptions);

    void managePlaces(std::vector<Place>& places, std::vector<Subscription>& subscriptions);

    void manageSubscriptions(std::vector<Subscription>& subscriptions);
    
    void loadAllPlacesFromFile(std::vector<Place>& places);
    void saveAllPlacesToFile(const std::vector<Place>& places);
    void loadAllSubscriptionsFromFile(std::vector<Subscription>& subscriptions);
    void saveAllSubscriptionsToFile(const std::vector<Subscription>& subscriptions);
};

#endif

Admin.cpp

#include "Admin.h"
#include "Place.h"
#include "Subscription.h"
#include <iostream>
#include <fstream>

using namespace std;

void Admin::saveAllPlacesToFile(const vector<Place>& places) {
    ofstream ofs("places.txt");
    if (!ofs) {
        cerr << "Ошибка открытия файла для записи мест!" << endl;
        wait();
        return;
    }
    for (const auto& place : places) {
        ofs << place << endl; 
    }
    wait();
    ofs.close();
  
}

void Admin::saveAllSubscriptionsToFile(const vector<Subscription>& subscriptions) {
    ofstream ofs("subscriptions.txt");
    if (!ofs) {
        cerr << "Ошибка открытия файла для записи подписок!" << endl;
        wait();
        return;
    }
    for (const auto& subscription : subscriptions) {
        ofs << subscription << endl; 
    }
    wait();
    ofs.close();
  
}

void Admin::showMenu(vector<Place>& places, vector<Subscription>& subscriptions) {
    int choice;
    do {
        cout << "\nМеню администратора\n";
        cout << "1. Управление залами\n";
        cout << "2. Управление подписками\n";
        cout << "3. Выйти\n";
        cout << "Выберите опцию: ";
        cin >> choice;
        system("cls");

        switch (choice) {
        case 1:
            managePlaces(places, subscriptions); 
            wait();
            break;
        case 2:
            manageSubscriptions(subscriptions);
            wait();
            break;
           
        case 3:
            cout << "Выход из системы...\n";
            wait();
            break;
            
        default:
            cout << "Неверный выбор, попробуйте снова.\n";
            wait();
        }
    } while (choice != 3);
}

void Admin::managePlaces(vector<Place>& places, vector<Subscription>& subscriptions) {
    int choice;
    do {
        cout << "\nУправление залами\n";
        cout << "1. Добавить новый зал\n";
        cout << "2. Просмотреть все залы\n";
        cout << "3. Обновить данные зала\n";
        cout << "4. Удалить зал\n";
        cout << "5. Сохранить данные о залах в файл\n";
        cout << "6. Вернуться в меню\n";
        cout << "Выберите опцию: ";
        cin >> choice;
        system("cls");

        switch (choice) {
        case 1: {
            Place newPlace;
            newPlace.create(places, subscriptions);
            cout << "Новая подписка добавлена" << endl;
            wait();
            break;
           
        }
        case 2:
            Place().read(places);
            wait();
            break;
           
        case 3:
            Place().update(places,subscriptions);
            wait();
            break;
            
        case 4:
            Place().deletes(places);
            wait();
            break;
        
        case 5:
            saveAllPlacesToFile(places);
            wait();
            break;
         
        case 6:
            cout << "Возвращение в главное меню...\n";
            
            break;
            
        default:
            cout << "Неверный выбор, попробуйте снова.\n";
            wait();
        }
    } while (choice != 6);
}

void Admin::manageSubscriptions(vector<Subscription>& subscriptions) {
    int choice;
    do {
        cout << "\nУправление подписками\n";
        cout << "1. Добавить новую подписку\n";
        cout << "2. Просмотреть все подписки\n";
        cout << "3. Обновить данные подписки\n";
        cout << "4. Удалить подписку\n";
        cout << "5. Сохранить данные о подписках в файл\n";
        cout << "6. Вернуться в меню\n";
        cout << "Выберите опцию: ";
        cin >> choice;
        system("cls");

        switch (choice) {
        case 1: {
            Subscription newSubscription;
            newSubscription.create(subscriptions);
            wait();
            break;
           
        }
        case 2:
            Subscription().read(subscriptions);
            wait();
            break;
          
        case 3:
            Subscription().update(subscriptions);
            wait();
            break;
           
        case 4:
            Subscription().deletes(subscriptions);
            wait();
            break;
            
        case 5:
            saveAllSubscriptionsToFile(subscriptions);
            wait();
            break;
          
        case 6:
            cout << "Возвращение в главное меню...\n";
            
            break;
         
        default:
            cout << "Неверный выбор, попробуйте снова.\n";
            wait();
        }
    } while (choice != 6);
}

Functions.h

#ifndef FUNCTIONS_H
#define FUNCTIONS_H

void wait();


#endif 

Functions.cpp

#include "Functions.h"
#include <iostream>

void wait() {
    std::cout << "\nНажмите любую клавишу, чтобы продолжить...";
    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::cin.get();
    system("cls");
}

Person.h

#ifndef PERSON_H
#define PERSON_H

#include <string>

class Person {
protected:
    std::string login;
    std::string password;

public:
    Person(const std::string& login, const std::string& password); 

    std::string getLogin() const;
    std::string getPassword() const;

    void showMenu();
};

#endif

Person.cpp

#include "Person.h"

Person::Person(const std::string& login, const std::string& password)
    : login(login), password(password) {}

std::string Person::getLogin() const {
    return login;
}

std::string Person::getPassword() const {
    return password;
}

Place.h

#ifndef PLACE_H
#define PLACE_H

#include <string>
#include <vector>
#include "Functions.h"
#include "Subscription.h" 

class Place : public Activation {
private:
    std::string name;
    std::string address;
    std::string hours;
    bool activated;
    std::vector<Subscription> subscriptions; 

public:
    Place(const std::string& name = "", const std::string& address = "", const std::string& hours = "", bool activated = false)
        : name(name), address(address), hours(hours), activated(activated) {}

    
    void setName(const std::string& name) { this->name = name; }
    void setAddress(const std::string& address) { this->address = address; }
    void setHours(const std::string& hours) { this->hours = hours; }

   
    std::string getName() const { return name; }
    std::string getAddress() const { return address; }
    std::string getHours() const { return hours; }

    bool isActivated() const { return activated; }
    const std::vector<Subscription>& getSubscriptions() const { return subscriptions; } 

    void activate() { activated = true; }
    void deactivate() { activated = false; }

    void addSubscription(const Subscription& sub) { subscriptions.push_back(sub); } 

    void create(std::vector<Place>& places, const std::vector<Subscription>& availableSubscriptions) const;
    void read(const std::vector<Place>& places) const;
    void update(std::vector<Place>& places, const std::vector<Subscription>& availableSubscriptions) const;
    void deletes(std::vector<Place>& places) const;

    
    void savePlacesToFile(std::ofstream& ofs) const;
    void loadPlacesFromFile(std::ifstream& ifs, const std::vector<Subscription>& existingSubscriptions);
    void loadAllPlacesFromFile(std::vector<Place>& places, const std::vector<Subscription>& existingSubscriptions);
    void saveAllPlacesToFile(const std::vector<Place>& places);

    friend std::ostream& operator<<(std::ostream& os, const Place& place) {
        os << "Название: " << place.name << "\n"
            << "Адрес: " << place.address << "\n"
            << "Часы работы: " << place.hours << "\n"
            << "Активирован: " << (place.activated ? "Да" : "Нет") << "\n"
            << "Подписки:\n";
        for (const auto& sub : place.subscriptions) {
            os << "  - " << sub << "\n";  
        }
        return os;
    }

};

#endif

Place.cpp

#include "Place.h"
#include "Subscription.h"
#include <iostream>
#include <fstream>
#include <algorithm>

using namespace std;

void Place::savePlacesToFile(ofstream& ofs) const {
    ofs << name << endl;
    ofs << address << endl;
    ofs << hours << endl;
    ofs << activated << endl;
    ofs << subscriptions.size() << endl; 
    for (const auto& subscription : subscriptions) {
        ofs << subscription.getName() << endl; 
    }
}


void Place::loadPlacesFromFile(ifstream& ifs, const std::vector<Subscription>& existingSubscriptions) {
    getline(ifs, name);
    getline(ifs, address);
    getline(ifs, hours);
    ifs >> activated;
    size_t subCount;
    ifs >> subCount;
    ifs.ignore(); 
    subscriptions.clear();

    for (size_t i = 0; i < subCount; i++) {
        string subscriptionName;
        getline(ifs, subscriptionName);

        
        auto it = std::find_if(existingSubscriptions.begin(), existingSubscriptions.end(),
            [&subscriptionName](const Subscription& sub) {
                return sub.getName() == subscriptionName;
            });

        if (it != existingSubscriptions.end()) {
            
            subscriptions.push_back(*it);
        }
        else {
            cout << "Подписка с именем " << subscriptionName << " не найдена.\n";
            return;
        }
    }
}

void Place::create(std::vector<Place>& places, const std::vector<Subscription>& subscriptions) const {

    Place newPlace;
    std::cout << "Введите название зала: ";
    std::cin >> newPlace.name; 

    std::cout << "Введите адрес зала: ";
    std::cin >> newPlace.address; 

    std::cout << "Введите время работы (формат HH:MM-HH:MM): ";
    std::cin >> newPlace.hours;  

    std::cout << "Зал активен? (1 - да, 0 - нет): ";
    std::cin >> newPlace.activated;
    cin.ignore();

   
    std::vector<Subscription> selectedSubscriptions;
    std::string subscriptionName;

    while (true) {
        std::cout << "Введите название подписки (или 'end' для завершения): ";
        std::getline(std::cin, subscriptionName);

        if (subscriptionName == "end") {
            break; 
        }

        auto subIt = std::find_if(subscriptions.begin(), subscriptions.end(),
            [&subscriptionName](const Subscription& sub) { return sub.getName() == subscriptionName; });
        if (subIt != subscriptions.end()) {
            
            selectedSubscriptions.push_back(*subIt);
        }
        else {
            std::cout << "Подписка с именем '" << subscriptionName << "' не найдена!\n";
        }
        cout << "Объект создан\n";
    }

   

    newPlace.subscriptions = selectedSubscriptions; 
    places.push_back(newPlace); 
}


void Place::read(const vector<Place>& places) const {
    if (places.empty()) {
        cout << "Нет объектов для отображения." << endl;
        return;
    }

    for (size_t i = 0; i < places.size(); i++) {
        cout << "Объект " << i + 1 << ":\n" << places[i] << endl;
    }
}

void Place::update(vector<Place>& places, const vector<Subscription>& availableSubscriptions) const {
    if (places.empty()) {
        cout << "Нет объектов для обновления." << endl;
        return;
    }

    int index;
    cout << "Введите номер зала для обновления: ";
    cin >> index;

    if (index <= 0 || index > places.size()) {
        cout << "Неверный номер зала." << endl;
        return;
    }

    Place& placeToUpdate = places[index - 1];

    string name, address, hours;
    cout << "Введите новое название зала (оставьте пустым для сохранения старого): ";
    cin.ignore();
    getline(cin, name);
    cout << "Введите новый адрес зала (оставьте пустым для сохранения старого): ";
    getline(cin, address);
    cout << "Введите новые часы работы (оставьте пустым для сохранения старых): ";
    getline(cin, hours);

    if (!name.empty()) placeToUpdate.setName(name);
    if (!address.empty()) placeToUpdate.setAddress(address);
    if (!hours.empty()) placeToUpdate.setHours(hours);

    int numSubscriptions;
    cout << "Сколько подписок вы хотите добавить? ";
    cin >> numSubscriptions;
    for (int i = 0; i < numSubscriptions; i++) {
        cout << "Доступные подписки:\n";
        for (size_t j = 0; j < availableSubscriptions.size(); j++) {
            cout << j + 1 << ". " << availableSubscriptions[j].getName() << "\n";
        }
        int subIndex;
        cout << "Выберите подписку по номеру: ";
        cin >> subIndex;
        if (subIndex > 0 && subIndex <= availableSubscriptions.size()) {
            placeToUpdate.addSubscription(availableSubscriptions[subIndex - 1]);
        }
        else {
            cout << "Неверный номер подписки." << endl;
        }
    }

    cout << "Зал обновлён успешно.\n";
}

void Place::deletes(vector<Place>& places) const {
    if (places.empty()) {
        cout << "Нет объектов для удаления." << endl;
        return;
    }

    int index;
    cout << "Введите номер зала для удаления: ";
    cin >> index;

    if (index <= 0 || index > places.size()) {
        cout << "Неверный номер зала." << endl;
        return;
    }

    places.erase(places.begin() + (index - 1));
    cout << "Зал удалён успешно.\n";
}

void saveAllPlacesToFile(const vector<Place>& places) {
    ofstream ofs("places.txt");
    if (!ofs) {
        cout << "Ошибка открытия файла для записи!\n";
        return;
    }

    for (const auto& place : places) {
        place.savePlacesToFile(ofs);
    }

    ofs.close();
    cout << "Данные о залах сохранены в файл.\n";
}

void loadAllPlacesFromFile(std::vector<Place>& places, const std::vector<Subscription>& existingSubscriptions) {
    std::ifstream ifs("places.txt");
    if (!ifs) {
        std::cout << "Ошибка открытия файла для чтения!\n";
        return;
    }

    places.clear();

    while (!ifs.eof()) {
        Place tempPlace;
        tempPlace.loadPlacesFromFile(ifs, existingSubscriptions);

        
        if (ifs.fail() && !ifs.eof()) {
            std::cout << "Ошибка при загрузке зала.\n";
            break; 
        }

        places.push_back(tempPlace);
    }

    ifs.close();
    std::cout << "Данные о залах загружены из файла.\n";
}

Subscription.h

#ifndef SUBSCRIPTION_H
#define SUBSCRIPTION_H

#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include "Functions.h"
#include "Activation.h"



class Subscription : public Activation{
private:
    int id;
    float price;
    int days;
    std::string name;
    bool activated = false;

public:
    Subscription(int id = 0, float price = 0.0f, int days = 0, const std::string& name = "")
        : id(id), price(price), days(days), name(name) {}

    friend void wait();
    void input();
    friend void output(const Subscription& service);

    
    void setName(const std::string& name) { this->name = name; }
    void setPrice(float price) { this->price = price; }
    void setDays(int days) { this->days = days; }
    void decrementDays() {
        if (days > 0) {
            --days; 
        }
    }

    std::string getName() const { return name; }
    float getPrice() const { return price; }
    int getDays() const { return days; }

    void saveSubscriptionsToFile(std::ofstream& ofs) const;
    void loadSubscriptionsFromFile(std::ifstream& ifs);
    void loadAllSubscriptionsFromFile(std::vector<Subscription>& subscriptions);
    void saveAllSubscriptionsToFile(const std::vector<Subscription>& subscriptions);


    void create(std::vector<Subscription>& services) const;
    void read(const std::vector<Subscription>& services) const;
    void update(std::vector<Subscription>& services) const;
    void deletes(std::vector<Subscription>& services) const;
    void workout(std::vector<Subscription>& services, Subscription*& selectedservice) const;
    void comparePrices(const std::vector<Subscription>& services) const;

    friend bool operator==(const Subscription& lhs, const Subscription& rhs) {
        return lhs.price == rhs.price;
    }

    friend bool operator>(const Subscription& lhs, const Subscription& rhs) {
        return lhs.price > rhs.price;
    }

    friend std::ostream& operator<<(std::ostream& os, const Subscription& sub) {
        os << "\n" << "Айди: " << sub.id << "\n" << "Имя: " << sub.name
            << "\n" << "Цена: " << sub.price << "\n" << "Кол-во занятий: " << sub.days << "\n";
        return os;
    }

    void activate() override {
        if (!activated) { 
            activated = true;
            std::cout << "Подписка \"" << name << "\" активирована." << std::endl;
        }
        else {
            std::cout << "Подписка \"" << name << "\" уже активирована." << std::endl;
        }
    }

    void deactivate() override {
        if (activated) {
            activated = false;
            std::cout << "Подписка \"" << name << "\" деактивирована." << std::endl;
        }
        else {
            std::cout << "Подписка \"" << name << "\" уже деактивирована." << std::endl;
        }
    }

    bool isActivated() const override {
        return activated;
    }
};

#endif 

Subscription.cpp

#include "Subscription.h"
#include <iostream>
#include <limits>

using namespace std;

void Subscription::saveSubscriptionsToFile(ofstream& ofs) const {
    ofs << id << endl;
    ofs << name << endl;
    ofs << price << endl;
    ofs << days << endl;
}

void Subscription::loadSubscriptionsFromFile(ifstream& ifs) {
    ifs >> id;
    ifs.ignore();
    getline(ifs, name);
    ifs >> price;
    ifs >> days;
}

void Subscription::input() {
    cout << "Введите ID услуги: ";
    cin >> id;
    cout << "Введите название услуги: ";
    cin >> name;
    cout << "Введите цену услуги: ";
    cin >> price;
    cout << "Введите кол-во занятий в услуге: ";
    cin >> days;
    cout << endl;
}

void output(const Subscription& service) {
    cout << endl << service;

}

void Subscription::create(vector<Subscription>& services) const {
    Subscription newservice;
    newservice.input();
    services.push_back(newservice);

    cout << "Объект создан\n";
    wait();
}

void Subscription::read(const vector<Subscription>& services) const {
    if (services.empty()) {
        cout << "Нет объектов для отображения" << endl;
        wait();
        return;
    }

    string checkname;
    cout << "Введите название услуги (или \"all\" для отображения всех): ";
    cin >> checkname;
    cout << endl;

    if (checkname == "all") {
        for (size_t i = 0; i < services.size(); i++) {
            cout << "Объект " << i + 1 << ": ";
            output(services[i]);
            cout << endl;
        }
    }
    else {
        bool found = false;
        for (const auto& service : services) {
            if (service.name == checkname) {
                output(service);
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "Услуга с названием \"" << checkname << "\" не найдена." << endl;
        }
    }
    wait();
}

void Subscription::update(vector<Subscription>& services) const {
    if (services.empty()) {
        cout << "Нет объектов для обновления" << endl;
        return;
    }

    string checkname;
    cout << "Введите название услуги для обновления: ";
    cin >> checkname;

    bool found = false;
    for (auto& service : services) {
        if (service.name == checkname) {
            service.input();
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Услуга с названием \"" << checkname << "\" не найдена" << endl;
    }
    wait();
}

void Subscription::deletes(vector<Subscription>& services) const {
    if (services.empty()) {
        cout << "Нет объектов для удаления" << endl;
        wait();
        return;
    }

    string checkname;
    cout << "Введите название услуги для удаления (или \"all\" для удаления всех): ";
    cin >> checkname;

    if (checkname == "all") {
        services.clear();
        cout << "Все объекты удалены" << endl;
    }
    else {
        auto it = remove_if(services.begin(), services.end(), [&](const Subscription& service) {
            return service.name == checkname;
            });
        if (it != services.end()) {
            services.erase(it, services.end());
            cout << "Услуга \"" << checkname << "\" удалена" << endl;
        }
        else {
            cout << "Услуга с названием \"" << checkname << "\" не найдена" << endl;
        }
    }
    wait();
}

void Subscription::comparePrices(const vector<Subscription>& services) const {
    if (services.size() < 2) {
        cout << "Для сравнения цен нужно минимум две услуги." << endl;
        wait();
        return;
    }

    string checkname1;
    string checkname2;
    cout << "Введите название первой услуги: ";
    cin >> checkname1;
    cout << "Введите название второй услуги: ";
    cin >> checkname2;

    const Subscription* service1 = nullptr;
    const Subscription* service2 = nullptr;

    for (const auto& service : services) {
        if (service.name == checkname1) {
            service1 = &service;
        }
        else if (service.name == checkname2) {
            service2 = &service;
        }
    }

    if (service1 && service2) {
        if (*service1 == *service2) {
            cout << "Услуги \"" << checkname1 << "\" и \"" << checkname2 << "\" имеют одинаковую цену." << endl;
        }
        else if (*service1 > *service2) {
            cout << "Услуга \"" << checkname1 << "\" дороже услуги \"" << checkname2 << "\"." << endl;
        }
        else {
            cout << "Услуга \"" << checkname2 << "\" дороже услуги \"" << checkname1 << "\"." << endl;
        }       
    }
    else {
        if (!service1) {
            cout << "Услуга с названием \"" << checkname1 << "\" не найдена." << endl;
        }
        if (!service2) {
            cout << "Услуга с названием \"" << checkname2 << "\" не найдена." << endl;
        }
    }
    wait();
}

void saveAllSubscriptionsToFile(const vector<Subscription>& subscriptions) {
    ofstream ofs("subscriptions.txt");
    if (!ofs) {
        cout << "Ошибка открытия файла для записи!\n";
        return;
    }

    for (const auto& sub : subscriptions) {
        sub.saveSubscriptionsToFile(ofs);
    }

    ofs.close();
    cout << "Данные о подписках успешно сохранены в файл.\n";
}

void loadAllSubscriptionsFromFile(vector<Subscription>& subscriptions) {
    ifstream ifs("subscriptions.txt");
    if (!ifs) {
        cout << "Ошибка открытия файла для чтения!\n";
        return;
    }

    subscriptions.clear();

    while (true) {
        Subscription tempSub;
        tempSub.loadSubscriptionsFromFile(ifs);
        if (ifs.eof()) {
            break;
        }
        subscriptions.push_back(tempSub);
    }

    ifs.close();
    cout << "Данные о подписках загружены из файла.\n";
}

User.h


#ifndef USER_H
#define USER_H

#include "Person.h"
#include "Subscription.h"
#include "Place.h"
#include <vector>

class User : public Person {
private:
    std::vector<Subscription> subscriptions;
    std::vector<Place> places;

public:
    User(const std::string& login = "user", const std::string& password = "user")
        : Person(login, password) {}

    void showMenu(const std::vector<Place>& places, const std::vector<Subscription>& subscriptions);
    void viewSubscriptions(const std::vector<Subscription>& subscriptions) const;
    void viewPlaces(const std::vector<Place>& places) const;

    void workout(const std::vector<Place>& places, const std::vector<Subscription>& subscriptions, Subscription*& selectedService) const;
    void comparePrices(const std::vector<Subscription>& services) const;
};

#endif

User.cpp


#include "User.h"
#include <iostream>

using namespace std;

void User::showMenu(const std::vector<Place>& places, const std::vector<Subscription>& subscriptions) {

    Subscription* selectedService = nullptr;
    int choice;
    do {
        std::cout << "\nМеню пользователя:\n";
        std::cout << "1. Воспользоваться услугой\n";
        std::cout << "2. Сравнить цены на услуги\n";
        std::cout << "3. Просмотреть подписки\n";
        std::cout << "4. Просмотреть залы\n";
        std::cout << "5. Выйти\n";
        std::cout << "Ваш выбор: ";
        std::cin >> choice;
        system("cls");

        switch (choice) {
        case 1:
            workout(places, subscriptions, selectedService); 
            
            break;
        case 2:
            if (!subscriptions.empty()) {
                Subscription sub; 
                sub.comparePrices(subscriptions); 
            }
            else {
                std::cout << "Нет доступных услуг для сравнения." << std::endl;
                wait();
            }
            
            break;
        case 3:
            viewSubscriptions(subscriptions); 
            
            break;
        case 4:
            viewPlaces(places);  
            
            break;
        case 5:
            std::cout << "Выход из системы...\n";
            wait();
            break;
        default:
            std::cout << "Неверный выбор, попробуйте снова.\n";
            wait();
        }
    } while (choice != 5);
}

void User::viewSubscriptions(const std::vector<Subscription>& subscriptions) const {
    std::cout << "Просмотр подписок...\n";
    for (const auto& sub : subscriptions) {
        std::cout << sub.getName() << " - Активна: " << (sub.isActivated() ? "Да" : "Нет") << "\n";
    }
    wait();
}

void User::viewPlaces(const std::vector<Place>& places) const {
    std::cout << "Просмотр списка залов...\n";
    for (const auto& place : places) {
        std::cout << place.getName() << " - Адрес: " << place.getAddress() << " - Работает: " << (place.isActivated() ? "Да" : "Нет") << "\n";
    }
    wait();
}

void User::workout(const std::vector<Place>& places, const std::vector<Subscription>& subscriptions, Subscription*& selectedService) const {
    if (places.empty()) {
        cout << "Нет доступных залов для выбора." << endl;
        wait();
        return;
    }

    cout << "Выберите зал для тренировки:\n";
    for (size_t i = 0; i < places.size(); ++i) {
        cout << i + 1 << ". " << places[i].getName() << " (" << places[i].getAddress() << ")\n";
    }

    int placeChoice;
    cin >> placeChoice;

    if (placeChoice <= 0 || placeChoice > places.size()) {
        cout << "Неверный выбор зала. Возвращение в главное меню..." << endl;
        wait();
        return;
    }

    cout << "Вы выбрали зал: " << places[placeChoice - 1].getName() << ".\n";

    if (subscriptions.empty()) {
        cout << "Нет доступных услуг для выбора." << endl;
        wait();
        return;
    }

    string checkname;
    cout << "Введите название услуги для выбора: ";
    cin >> checkname;

    bool found = false;
    for (auto& service : subscriptions) {
        if (service.getName() == checkname) {
            selectedService = &const_cast<Subscription&>(service);
            cout << "Услуга \"" << selectedService->getName() << "\" выбрана." << endl;
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Услуга с названием \"" << checkname << "\" не найдена." << endl;
        wait();
        return;
    }

    if (!selectedService->isActivated()) {
        cout << "Активация услуги..." << endl;
        selectedService->activate();
    }

    int choice;
    do {
        cout << "\n1. Провести тренировку\n2. Проверить статус тренировки\n3. Отменить текущую услугу\n4. Вернуться в главное меню\nВыберите опцию: ";
        cin >> choice;
        system("cls");

        switch (choice) {
        case 1:
            if (selectedService->getDays() > 0) {
                selectedService->decrementDays();
                cout << "Тренировка проведена. Осталось дней: " << selectedService->getDays() << endl;
            }
            else {
                cout << "У этой услуги больше не осталось доступных дней для тренировок." << endl;
            }
            wait();
            break;

        case 2:
            cout << "Выбранная услуга: \"" << selectedService->getName() << "\"\nОсталось дней: " << selectedService->getDays() << endl;
            wait();
            break;

        case 3:
            cout << "Выход из услуги \"" << selectedService->getName() << "\"." << endl;
            selectedService->deactivate();
            selectedService = nullptr;
            wait();
            return;

        case 4:
            cout << "Возвращение в главное меню..." << endl;
            wait();
            break;

        default:
            cout << "Неверный выбор. Попробуйте снова." << endl;
            wait();
            break;
        }
    } while (choice != 4);
}

main.cpp

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include "Admin.h"
#include "User.h"   
#include "Place.h"
#include "Subscription.h"
#include "Functions.h"

using namespace std;

void loadAllPlacesFromFile(std::vector<Place>& places, const std::vector<Subscription>& existingSubscriptions);
void saveAllPlacesToFile(const std::vector<Place>& places);
void loadAllSubscriptionsFromFile(std::vector<Subscription>& subscriptions);
void saveAllSubscriptionsToFile(const std::vector<Subscription>& subscriptions);

int main() {
    setlocale(LC_ALL, "rus");
    vector<Place> places;
    vector<Subscription> subscriptions;

    char loadFromFile;
    cout << "Считывать данные из файла? (y/n): ";
    cin >> loadFromFile;
    cin.ignore();

    if (loadFromFile == 'y' || loadFromFile == 'Y') {
        cout << endl;
        loadAllSubscriptionsFromFile(subscriptions);
        loadAllPlacesFromFile(places, subscriptions);
        wait();
    }

    int userType;
    cout << "Выберите тип пользователя:\n";
    cout << "1. Администратор\n";
    cout << "2. Обычный пользователь\n";
    cout << "Ваш выбор: ";
    cin >> userType;

    if (userType == 1) {
        string inputLogin, inputPassword;
        cout << "Введите логин: ";
        cin >> inputLogin;
        cout << "Введите пароль: ";
        cin >> inputPassword;

        Admin admin;

        if (inputLogin == admin.getLogin() && inputPassword == admin.getPassword()) {
            cout << "Успешный вход!" << endl;
            wait();
            admin.showMenu(places, subscriptions);

            saveAllPlacesToFile(places);
            saveAllSubscriptionsToFile(subscriptions);
        }
        else {
            cout << "Неверный логин или пароль!" << endl;
            wait();
           
        }
    }
    else if (userType == 2) {
        string inputLogin, inputPassword;
        cout << "Введите логин: ";
        cin >> inputLogin;
        cout << "Введите пароль: ";
        cin >> inputPassword;

        User user;

        if (inputLogin == user.getLogin() && inputPassword == user.getPassword()) {
            cout << "Успешный вход!" << endl;
            wait();
            user.showMenu(places, subscriptions);
        }
        else {
            cout << "Неверный логин или пароль!" << endl;
            wait();
           
        }
    }
    else {
        cout << "Неверный выбор! Программа завершена." << endl;
        wait();
    }

    return 0;
}
